// Auto-generated by the postman-to-k6 converter
// ...but 'options' has been changed! 

import "./libs/shim/core.js";
import "./libs/shim/jsonSchema.js";
import "./libs/shim/urijs.js";

export let options = {
  maxRedirects: 4,
  duration: '5m',
  vus: 100,
};

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    host: "mil-d-apim.azure-api.net",
    context: "mil-auth",
    acquirerId: "4585625",
    channel: "POS",
    merchantId: "28405fHfk73x88D",
    terminalId: "01234567",
    correctUsername: "antonio.tarricone",
    correctPassword: "antonio",
    clientIdForPassword: "5254f087-1214-45cd-94ae-fda53c835197",
    wrongUsername: "fabrizio.tarricone",
    wrongPassword: "fabrizio",
    wrongClientId: "26367881-7bfb-4b45-8b78-0a0937211e67",
    clientIdForExtToken: "5254f087-1214-45cd-94ae-fda53c835197",
    wrongExtToken:
      "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJOZXhpIiwicG95bnQuZGlkIjoidXJuOnRpZDo1NTYyYjhlZC1lODljLTMzMmEtYThkYy1jYTA4MTcxMzUxMTAiLCJwb3ludC5kc3QiOiJEIiwicG95bnQub3JnIjoiMGU2Zjc4ODYtMDk1Ni00NDA1LWJjNDgtYzE5ODY4ZDdlZTIyIiwicG95bnQuc2N0IjoiVSIsImlzcyI6Imh0dHBzOlwvXC9zZXJ2aWNlcy1ldS5wb3ludC5uZXQiLCJwb3ludC51cmUiOiJPIiwicG95bnQua2lkIjozOTMyNDI1MjY4MDY5NDA5MjM0LCJwb3ludC5zY3YiOiJOZXhpIiwicG95bnQuc3RyIjoiZDNmZDNmZDMtMTg5ZC00N2M4LThjMzYtYjY4NWRkNjBkOTY0IiwiYXVkIjoidXJuOnRpZDo1NTYyYjhlZC1lODljLTMzMmEtYThkYy1jYTA4MTcxMzUxMTAiLCJwb3ludC51aWQiOjM3MzY1NzQsInBveW50LmJpeiI6IjRiN2ViOTRiLTEwYzktNGYxMS1hMTBlLTcyOTJiMjlhYjExNSIsImV4cCI6MTY4NDU3NTMzNiwiaWF0IjoxNjg0NDg4OTM2LCJqdGkiOiJmNzc5MjQ1OS00ODU1LTQ5YjMtYTZiYS05N2QzNzQ5NDQ2ZGIifQ.niR8AS3OHlmWg1-n3FD4DKoAWlY0nJyEJGBZSBFWHYCl01vjIIFYCmTCyBshZVEtDBKpTG1bWTmVctOCX2ybF5gQ0vBH1H3LFD13Tf73Ps439Ht5_u3Q-jHPf_arXDf2enOs_vKwp8TsdJNPRcxMhYZ91yyiAhbHERVypP2YPszwv5h6mMq_HWNzK9qjrLh8zQCGBEMkFfnSG1xOjzTZLJ4ROPazaDHJ9DSZReC4dY_jRqAlivbXVeLOnN3D4y_GatcHQO1_p_jYE-eXHjLP-wINeAqW57P57HmSe2n67q6UkQf5v5zKVHrJpTFAtHWpDVLxmhPKGurTX45yOvaDZw",
    addDataForExtToken: "4b7eb94b-10c9-4f11-a10e-7292b29ab115",
    clientIdForClientCredentials: "92faf319-4219-455f-841b-bb692684672a",
    correctClientSecret: "be81144b-e8ec-487d-a440-ea8d144343f7",
    wrongClientSecret: "d163b367-6035-4c73-9cec-136ccc578371",
    refreshToken: "",
    wrongRefreshToken:
      "eyJraWQiOiI5M2IxZjYxYy0yYTQ4LTQwNzYtOGRhNi1mNjEwZWNkNTc4M2UiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI1MjU0ZjA4Ny0xMjE0LTQ1Y2QtOTRhZS1mZGE1M2M4MzUxOTciLCJjbGllbnRJZCI6IjUyNTRmMDg3LTEyMTQtNDVjZC05NGFlLWZkYTUzYzgzNTE5NyIsIm1lcmNoYW50SWQiOiIyODQwNWZIZms3M3g4OEQiLCJzY29wZSI6Im9mZmxpbmVfYWNjZXNzIiwiY2hhbm5lbCI6IlBPUyIsInRlcm1pbmFsSWQiOiIwMTIzNDU2NyIsImV4cCI6MTY4NjA0MzQ1MiwiYWNxdWlyZXJJZCI6IjQ1ODU2MjUiLCJpYXQiOjE2ODYwMzk4NTJ9.RRrtFUL2fGmdjNCVlvBOCze9z3Wo2XSfM-c4dd4RV3fFvsqum2WgTXOACaX0RKJBiMj2SNSpdcQK2OgyXZx_z7j6c8PrziC2mJZaT0vmQ7pWEF_0sNYz_Pwulha3Ykx7wFhcRngMelCOb-PrtHuLoV4XwtBrEk3pzpeJJdmFauGsoQ_079NTBaDfDrpcc7armHiPQ4-7ZKRsOPu-FVtqiB4sdOisg-u1p0XvvoDGnxP0A-7c6N7pvrnTVCnIjrYPV0_-MgFzH1WhQ8baoNSr3lsPG3H9Fs1dVXVsfTA3hYnn7ezbIlETW6TXIiWRoZ1yvjP7NoGKgH_6_NHFgYDbMjPUQPdByu11WJ640fLILk3DF2Se7yHEQb7-N_QhOpx2SqeZzI56Y659d8BUk-IkgG20A2N2GWDWgGCcboPmfE9Np67yj2znAIMo8WhoGUD9cLuTEGBBFOjiZ8pDxfSsdGsO4rfjOAayJ_kbLtbc_Tj6ZPymv3vSMISXYAASteynrU3bv-Td-H9Wzs1ABJFHyLFLibSCqztNOkBn9iiWCKrR30iQUxcqmiypZoQT5fjkNlHCxKHF4S8QpQs9m0nq2j76_7ipzDaKgE2i8HtccLBi3XvOl88brmjnKilk49MpoNAPsgRVNz-DZ2pq9olQh7o_y--0_T4ht7zhto7a69I"
  },
  environment: {
    url: "https://mil-d-apim.azure-api.net/mil-auth"
  }
});

export default function() {
  postman[Request]({
    name: "client_credentials - ok",
    id: "08595b52-1dce-4233-84a6-b7b4b735cbee",
    method: "POST",
    address: "{{url}}/token",
    data: {
      client_secret: "{{correctClientSecret}}",
      client_id: "{{clientIdForClientCredentials}}",
      grant_type: "client_credentials"
    },
    headers: {
      RequestId: "00000000-0000-0000-0000-000000000006"
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });

      const schema = {
        type: "object",
        properties: {
          access_token: {
            type: "string"
          },
          token_type: {
            type: "string"
          },
          expires_in: {
            type: "integer"
          }
        },
        required: ["access_token", "token_type", "expires_in"],
        additionalProperties: false
      };

      pm.test("Schema is valid", function() {
        pm.response.to.have.jsonSchema(schema);
      });
    }
  });

  postman[Request]({
    name: "client_credentials - wrong client id",
    id: "5faf87a2-ceb6-48ce-9c68-067b24078b89",
    method: "POST",
    address: "{{url}}/token",
    data: {
      client_secret: "{{wrongClientId}}",
      client_id: "{{clientIdForClientCredentials}}",
      grant_type: "client_credentials"
    },
    headers: {
      RequestId: "00000000-0000-0000-0000-000000000007"
    },
    post(response) {
      pm.test("Status code is 401", function() {
        pm.response.to.have.status(401);
      });
    }
  });

  postman[Request]({
    name: "client_credentials - wrong client secret",
    id: "28069f08-8dbb-4b52-aefc-b3d07884bb8c",
    method: "POST",
    address: "{{url}}/token",
    data: {
      client_secret: "{{wrongClientSecret}}",
      client_id: "{{clientIdForClientCredentials}}",
      grant_type: "client_credentials"
    },
    headers: {
      RequestId: "00000000-0000-0000-0000-000000000008"
    },
    post(response) {
      pm.test("Status code is 401", function() {
        pm.response.to.have.status(401);
      });
    }
  });

  postman[Request]({
    name: "password - ok w/o refresh token",
    id: "5034bff7-fb1e-43fd-a789-f93349262695",
    method: "POST",
    address: "{{url}}/token",
    data: {
      username: "{{correctUsername}}",
      password: "{{correctPassword}}",
      client_id: "{{clientIdForPassword}}",
      grant_type: "password"
    },
    headers: {
      RequestId: "00000000-0000-0000-0000-000000000001",
      AcquirerId: "{{acquirerId}}",
      Channel: "{{channel}}",
      MerchantId: "{{merchantId}}",
      TerminalId: "{{terminalId}}"
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });

      const schema = {
        type: "object",
        properties: {
          access_token: {
            type: "string"
          },
          token_type: {
            type: "string"
          },
          expires_in: {
            type: "integer"
          }
        },
        required: ["access_token", "token_type", "expires_in"],
        additionalProperties: false
      };

      pm.test("Schema is valid", function() {
        pm.response.to.have.jsonSchema(schema);
      });
    }
  });

  postman[Request]({
    name: "password - ok w/ refresh token",
    id: "538bad2f-227b-4537-a797-60b932591b69",
    method: "POST",
    address: "{{url}}/token",
    data: {
      username: "{{correctUsername}}",
      password: "{{correctPassword}}",
      client_id: "{{clientIdForPassword}}",
      grant_type: "password",
      scope: "offline_access"
    },
    headers: {
      RequestId: "00000000-0000-0000-0000-000000000002",
      AcquirerId: "{{acquirerId}}",
      Channel: "{{channel}}",
      MerchantId: "{{merchantId}}",
      TerminalId: "{{terminalId}}"
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });

      const schema = {
        type: "object",
        properties: {
          access_token: {
            type: "string"
          },
          refresh_token: {
            type: "string"
          },
          token_type: {
            type: "string"
          },
          expires_in: {
            type: "integer"
          }
        },
        required: ["access_token", "refresh_token", "token_type", "expires_in"],
        additionalProperties: false
      };

      pm.test("Schema is valid", function() {
        pm.response.to.have.jsonSchema(schema);
      });

      // Save refresh token, for following test.
      const respJson = pm.response.json();
      pm.collectionVariables.set("refreshToken", respJson.refresh_token);
    }
  });

  postman[Request]({
    name: "password - wrong username",
    id: "b1cd6d1a-92dc-4212-b6bb-1a0b64b2c016",
    method: "POST",
    address: "{{url}}/token",
    data: {
      username: "{{wrongUsername}}",
      password: "{{correctPassword}}",
      client_id: "{{clientIdForPassword}}",
      grant_type: "password"
    },
    headers: {
      RequestId: "00000000-0000-0000-0000-000000000003",
      AcquirerId: "{{acquirerId}}",
      Channel: "{{channel}}",
      MerchantId: "{{merchantId}}",
      TerminalId: "{{terminalId}}"
    },
    post(response) {
      pm.test("Status code is 401", function() {
        pm.response.to.have.status(401);
      });
    }
  });

  postman[Request]({
    name: "password - wrong password",
    id: "db6704e9-0f4d-4d17-93af-d7a0cea94059",
    method: "POST",
    address: "{{url}}/token",
    data: {
      username: "{{correctUsername}}",
      password: "{{wrongPassword}}",
      client_id: "{{clientIdForPassword}}",
      grant_type: "password"
    },
    headers: {
      RequestId: "00000000-0000-0000-0000-000000000004",
      AcquirerId: "{{acquirerId}}",
      Channel: "{{channel}}",
      MerchantId: "{{merchantId}}",
      TerminalId: "{{terminalId}}"
    },
    post(response) {
      pm.test("Status code is 401", function() {
        pm.response.to.have.status(401);
      });
    }
  });

  postman[Request]({
    name: "poynt_token - wrong token",
    id: "1649f0d0-8629-4bd2-9dba-847d62455a8c",
    method: "POST",
    address: "{{url}}/token",
    data: {
      ext_token: "{{wrongExtToken}}",
      add_data: "{{addDataForExtToken}}",
      client_id: "{{clientIdForExtToken}}",
      grant_type: "poynt_token",
      scope: "offline_access"
    },
    headers: {
      RequestId: "00000000-0000-0000-0000-000000000005",
      AcquirerId: "{{acquirerId}}",
      Channel: "{{channel}}",
      MerchantId: "{{merchantId}}",
      TerminalId: "{{terminalId}}"
    },
    post(response) {
      pm.test("Status code is 401", function() {
        pm.response.to.have.status(401);
      });
    }
  });

  postman[Request]({
    name: "refresh_token - ok",
    id: "df3f6463-6050-4b49-8707-8977cc2a4aad",
    method: "POST",
    address: "{{url}}/token",
    data: {
      client_id: "{{clientIdForPassword}}",
      grant_type: "refresh_token",
      refresh_token: "{{refreshToken}}"
    },
    headers: {
      RequestId: "00000000-0000-0000-0000-000000000009",
      AcquirerId: "{{acquirerId}}",
      Channel: "{{channel}}",
      MerchantId: "{{merchantId}}",
      TerminalId: "{{terminalId}}"
    },
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });

      const schema = {
        type: "object",
        properties: {
          access_token: {
            type: "string"
          },
          refresh_token: {
            type: "string"
          },
          token_type: {
            type: "string"
          },
          expires_in: {
            type: "integer"
          }
        },
        required: ["access_token", "refresh_token", "token_type", "expires_in"],
        additionalProperties: false
      };

      pm.test("Schema is valid", function() {
        pm.response.to.have.jsonSchema(schema);
      });

      // Save refresh token, for following test.
      const respJson = pm.response.json();
      pm.collectionVariables.set("refreshToken", respJson.refresh_token);
    }
  });

  postman[Request]({
    name: "refresh_token - wrong token",
    id: "29f965ef-6168-41a7-809b-7b90f8021cc2",
    method: "POST",
    address: "{{url}}/token",
    data: {
      client_id: "{{clientIdForPassword}}",
      grant_type: "refresh_token",
      refresh_token: "{{wrongRefreshToken}}"
    },
    headers: {
      RequestId: "00000000-0000-0000-0000-00000000000a",
      AcquirerId: "{{acquirerId}}",
      Channel: "{{channel}}",
      MerchantId: "{{merchantId}}",
      TerminalId: "{{terminalId}}"
    },
    post(response) {
      pm.test("Status code is 401", function() {
        pm.response.to.have.status(401);
      });
    }
  });

  postman[Request]({
    name: "JWKS",
    id: "79d7d5cc-e703-4d8d-b98b-ba4c9cd3b1df",
    method: "GET",
    address: "{{url}}/.well-known/jwks.json",
    post(response) {
      pm.test("Status code is 200", function() {
        pm.response.to.have.status(200);
      });

      const schema = {
        type: "object",
        properties: {
          keys: {
            type: "array",
            items: {
              type: "object",
              properties: {
                e: {
                  type: "string"
                },
                use: {
                  type: "string"
                },
                kid: {
                  type: "string"
                },
                n: {
                  type: "string"
                },
                kty: {
                  type: "string"
                },
                exp: {
                  type: "integer"
                },
                iat: {
                  type: "integer"
                }
              },
              required: ["e", "use", "kid", "n", "kty", "exp", "iat"],
              additionalProperties: false
            }
          }
        },
        required: ["keys"],
        additionalProperties: false
      };

      pm.test("Schema is valid", function() {
        pm.response.to.have.jsonSchema(schema);
      });
    }
  });
}
